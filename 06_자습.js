// 📘 DOM 내용 추가 

// 🟦 DOM 트리


// 🟦 트리(노드) 활용해서 태그 추가 하기 


// 🟦 remove 


// 🟦 이벤트 추가 

// 📛📛📛 기본동작 제거하는 거를 못 했음 
// form 태그 추가하고 하는 것 




// 🟦 이벤트 종류들 



// 📚 데이터를 저장할 수 있는 방식 
    // [궁금한 점]
        // '방문' 하면 > '데이터' 가 생김. 이 데이터를 1) 쿠키, 2) 로컬 스토리지 3) 세션 등으로 나눠서 쓸 수 있는건가? 
        // 로컬 스토리지에 유효기간을 부여하면, 쿠키의 기능을 하는건가?  

    // [종류]
        // 1) 쿠키, 2) 세션, 3) 로컬 스토리지


// 📘 세션 
    // [의의]
        // 브라우저가 동작하는 동안에 남아있는 데이터 
        // '상태' 같은 내용을 다룰 때 
        // 
        
    // [궁금한 것]
        // '브라우저를 사용하는 순간 데이터가 발생함' > 이것중, '이걸 얻을거야' 라고 해야 > '세션 데이터' 를 얻을 수 있나?


// 📘 쿠키 

    // [의의] 
        // 웹사이트를 방문하고 사용자의 pc에 기록할 간단한 데이터
        // pc 에 저장해 두었다가, 값을 호출해서, 사용할 수 있다. 

        // [✅정리] 웹사이트 '방문' > '⭐pc에 저장⭐' > (쿠키 만료기간까지, 쿠키가 상하기 전까지) 값을 호출해서 사용. 

    // [특징]
        // 'pc 에 저장'되기 떄문에 > '브라우저가 종료' 되어도 남아있다. 
        
        // document 객체 안에 있다. ⭐⭐
            // console.log(document.cookie) 
        // [궁금증] 
            // DOM 이랑 BOM 이랑 많이 다른가? Document 는 구체적으로 뭐지? ❓❓❓ 

    // [구조]
        // 쿠키는 '키(value)'와 '값(value)' 이 있다. ⭐⭐⭐⭐⭐⭐  
        // '문자열' 로 저장하면 된다. ⭐⭐⭐⭐⭐ 




    // 🟦 1. 쿠키 만들기 
    function createCookie(name, value, time) {

        // 변수 의미 
            // name : 쿠키의 이름(키)
            // value : 값
            // time : 유효시간(시간 기준은 '일' 임. / 왜냐면, 밑에 밀리세컨즈 변환식을 보면, 그렇게 기능함.)

        // 쿠키 '유효시간' 만들기 

            // 1) '지금 이게 작동하는 시간' 에 정보를 갖는 객체를 만들어준다.
                // [궁금증] 
                    // 이게, '인터넷 시간? ❓
                    // 인터넷 off 면 > 각자 시간이 다르겠네? 
                    
                let date = new Date();
                    // Date 라는 걸 만들지 않았지만, '미리 구현' 되어 있는거지❓
                        // 응. constructor 라는게 있음. 이걸 사용해서 date 라는 '생성자 함수' 를 '미리' 만들어놨음. 
                        // 이렇게 constructor 라는 걸 사용해서 만들면 '초록색' 으로 변함. 

                console.log(date);
                    // [결과물] `Wed Mar 22 2023 16:35:45 GMT+0900 (한국 표준시)` 


            // 2) 제거하고 싶은 시간 설정 ex) 1시간 후에 제거하고 싶어
                // [궁금증]
                    // 쿠키를 갖고 있어야 하는 기간이 있나? ❓❓❓ 
                // 1일 후에 제거하겠음. 
                // let day = 1;
                    // 이거 let day 는 사용하지 않음! 그냥 예시였음. 

                // 지금 시점 이후로 하루를 '밀리세컨즈' 로 변환
                console.log(date.getTime() + time * 24 * 60 * 60 * 1000); 
                    // ⭐ 이건, new Date 로 > 객체를 만들면 > 사용할 수 있는 메소드들이 '이미 정의' 되어 있고 > 그 중 하나가, getTime() 인..거고❓❓❓
                        // 메소드를 정할 때, get 은 보통 '정보를 가져온다.' 는 '무언의 약속?' 같은걸 짜는 사람들이 한건가? 아니면, 개념용어가 있나? ❓❓❓ 

            // 3) 위에서 정한 시간을 'date 객체' 에 넣어주기
                // 이게 그러니까, 
                    // 1) `new Date()`라는, 미리 만들어진 생성자 함수로 객체를 만들고 
                    // 2) `date.getTime()`만들어진 객체에서, getTime 이라는 키에 있는 함수를 가져와서 실행 
                    // 3) `date.setTime()` 을 해서, 만들어진 date 객체에서, setTime 이라는 키에 대응하는 value 를 넣어줘?
                date.setTime(date.getTime() + time * 24 * 60 * 60 * 1000)
                    // [해석]
                        // 'set' vs 'get' ⭐⭐⭐⭐⭐ 
                            // set : 정보를 '변경' 할 때, 네이밍으로 많이 사용
                            // get : 정보를 '호출' 할 때 
                            // '메소드 네이밍을 할 때,' 에 해당하는 내용이 맞지❓❓❓❓❓❓❓❓❓❓
                    // [👏정리] 
                        // 여기까지는 date 라는 객체를 생성 > 시간을 받아와서 > date 객체에 원하는 시간을 넣는거

            // 4) cookie 값이 있는 document cookie 라는 곳에, 1) 데이터의 이름 2) 데이터의 값 3) (형태를 맞춰서) 만료시간을 넣기 

                // 시간 변환 형식 확인하기 
                console.log(date.toUTCString()); 
                    // [결과물] `Thu, 23 Mar 2023 07:55:17 GMT` 이렇게 변환 
                    // [해석] cookie 가 이 형식을 원 함. 

                // 형식에 맞게 넣어주기
                    // [기본 규격] ⭐⭐⭐⭐⭐ 
                        // 쿠키의 이름(name변수) = 값(value 변수) ;expires + 만료일 + ";path=/"
                        // 이 규격이 표현하는 것 
                            // 1) 어떤 key, 변수 인지 
                            // 2) 어떤 값, value 가 들어가는지 
                            // 3) 이 value 가 '언제 만료' 되는지
                            // 4) 그 날짜 형식을 UTC 형식으로 변환했는지 
                            // 5) path ❓ / 이 쿠키가 수집된 페이지? ❓ 
                                    // 이걸 '문자열' 로 기재한다는 점에서, 쿠키의 특징 = 문자열⭐⭐

                        // ⭐⭐⭐ 이렇게 넣어야 하는 이유는, 'document.cookie' 라는 객체에, 이미 들어가 있는 구조가, 이거여서?  
                document.cookie = name + "=" + value + ";expires" + date.toUTCString() + ";path=/"; 
                    // ❓ value 가 뭘 의미할까? 
    }
    // [질문]
        // createCookie 의 세번째 인자는 '몇 일 뒤' 에 제거하고 싶으면 > day? 
        // `let day = 1` 로 잡아주는게 맞지? 
        // 세 번째 인자로 매개변수를 받을건데, 굳이 let day = 1 으로 하는 이유는? ❓❓❓❓❓❓❓❓❓❓ 




    // 함수 실행 예시
        createCookie("이벤트 팝업, name 에 해당", "true", 1);
        createCookie("내가 수집하고 싶은 데이터 이름👏", "어떤 value인지🔮", 1);
        createCookie("이벤트 팝업", "true", 1);
        createCookie("이벤트 팝업2", "true", 1);
        createCookie("이벤트 팝업3", "true", 2);
            // 세번째 인자가 '숫자' 로 들어가야!
            // 그래야, expire 인자를 넣을 수 있어!  



    // 값이 어떻게 나오는지 확인 
        console.log(document.cookie)
        // console.log(document)




// 🟦 2. 쿠키 가져오기 
    // getCookie 는 야매라서 가져오는 걸로 쓰지 않음. 
    // '정규식' 을 사용함.
        // '문자열' 을 value 로 넣기 때문으로 추측 
    // [주의사항]
        // 'match' 메소드를 사용해야 함. 
        // match 메소드는, 매개변수로 정규식 전달 ⭐⭐
        // match 메소드가 필요한 이유는, 쿠키에 저장할 때, '텍스트 형태' 로 저장했기 때문. ❓❓❓ 



    // 야매로 작성한것.
    // function getCookie(){
    //     let value = document.cookie.split("=");
    //     // = 제거하고 배열로 변경
    //     console.log(value)
    //     return value[1];
    // }
    


    function getCookie2(name) {
        // 매개변수로 정규식 전달
        // match 메소드를 사용
        let value = document.cookie.match("(^|;) ?" + name + "=([^;]*)(;|$)");

        // console.log(value + "value 만 나와야 하는거 아냐?❓❓");
            // 으응 맞아. 
            // 잘 안 나오면, 잘 안 솎아지는 거야. 정규식 배워서. 
        console.log(value) 
        return value ? value [2] : null;
    }


    getCookie2("내가 수집하고 싶은 데이터 이름👏")
        // [궁금증]
            // 이걸 하면 > "어떤 value인지🔮" 이것만 보여야 할거 같은데 
            // 왜 이렇게 전체로 나오지? ❓❓❓❓❓ 
                // `; 내가 수집하고 싶은 데이터 이름👏=어떤 value인지🔮,;,어떤 value인지🔮,value 만 나와야 하는거 아냐?❓❓`


// 🟦 3. 쿠키 제거 
    // '유효기간' 을 지나게 하면 > 쿠키는 제거 된다. (쿠키가 상함)
        function deleteCookie(name) {
            document.cookie = name + "=; expires=Thu, 01 Jan 1999 00:00:10 GMT;";
        }

    // [궁금증]
        // 그러면, 근데, 그러면, 이 컴퓨터가 연결된 시간을 뒤로 돌리면 > 삭제된 쿠키를 다 볼 수 있는거 아냐?❓❓❓❓❓ 
        // 왜 데이터를 완전히 파기 안 하지❓❓❓ 

        // 어떤 데이터를 갖고 오고 싶은가! 는 내가 정해?❓❓❓ 

    // [예시]
        // application > storage > cookies 에 가서 확인하면 됨⭐⭐⭐ 
        deleteCookie("이벤트 팝업, name 에 해당")
        deleteCookie("내가 수집하고 싶은 데이터 이름👏")
        deleteCookie("이벤트 팝업")
        deleteCookie("이벤트 팝업2")
        deleteCookie("이벤트 팝업3")




// 📘 로컬 스토리지 

        // [의의]
            // 브라우저에 데이터를 저장하는 방법들 중 하나. 
            // pc 에 데이터가 저장. 
        
        // [특징]
            // '만료일' 이 없음 ⭐⭐⭐
                // '쿠키', '세션' 과 다른 점 
            // 브라우저 기능을 사용해야 하니까, 'window 객체 안에 있는 메소드' 를 사용
            // 'window 객체 안에 있는 메소드' 중 getItem 사용 
            // (미리 만들어둔 메소드들은) 접두어 get 은 값을 가져오는 것 (이 무언의 약속❓❓❓❓❓)


            // [궁금한 점]
                    // 


// 🟦 getItem
    // [특징]
        // 브라우저 기능을 사용해야 하기 때문에 > 'window 객체' 안에 있는 메소드 사용 
        // getItem() 메소드는 매개변수로 '키(key)' 값을 받는다. 
        // window.localStorage.getItem()

        // 'get' 이라는 용어사용은 미리 개발자들이 만들어뒀음.! 
        // 즉, 'constructor' 를 사용해서 내가 생성자 함수를 만들지 않더라도, 이미 만들어둔 대로 사용하면, 객체가 만들어질 수 있게 했음. 


// 🟦 setItem 
    // [특징]
        // setItem 메소드는 '값(value)' 을 '키(key)' 와 함께 저장시켜준다. ⭐⭐⭐⭐⭐ 
        // 쿠키, 로컬스토리지는 접근이 쉽기 때문에, 
        window.localStorage.setItem("user_id", "soo");
        let a = window.localStorage.getItem("user_id");
        console.log(a);


// 🟦 `index4.html' 에서 저장한 걸 > `index5.html' 에서 확인하기 
    // ex) 장바구니? 

